Контрольные вопросы:

    1) Что такое сигнатура метода?

        В Java сигнатура метода — это совокупность его идентифицирующих характеристик, позволяющая различать методы в классе. Сигнатура включает:
        имя метода.
        список параметров (их типы и порядок следования).

    2) Зачем нужен конструктор?

        В Java конструктор — это специальный метод, который используется для создания и инициализации объектов класса.
        Конструкторы имеют то же имя, что и класс, и не имеют возвращаемого типа (даже void).
        Зачем нужен:
            1) Инициализация объекта:
            Конструктор автоматически вызывается при создании объекта с помощью ключевого слова new.
            Он задаёт начальные значения для полей объекта.
            2)Переопределение значений по умолчанию:
            Конструкторы позволяют задать значения полей, отличные от стандартных.
            3)Разные способы создания объектов:
            В Java можно перегружать конструкторы, чтобы создавать объект с разными параметрами.
            Обеспечение обязательной инициализации:
            Если в классе нет конструктора, Java предоставляет конструктор по умолчанию (без параметров).
            Однако если разработчик явно создаёт конструкторы с параметрами, то создание объекта без параметров становится невозможным без явного добавления конструктора по умолчанию.

    3) Дайте определение классу и объекту?

        Класс
        Класс — это шаблон или чертеж для создания объектов.
        Он определяет состояние (поля) и поведение (методы), которые будут у объектов этого класса.
        Класс описывает, какие данные и действия будут доступны объектам, создаваемым на основе этого класса.

        Объект
        Объект — это экземпляр класса, созданный на основе его шаблона.
        Каждый объект имеет свои данные (состояние) и может выполнять действия (методы), определённые в классе.
        Объект живёт в памяти и может взаимодействовать с другими объектами.
        Объект создаётся с помощью ключевого слова new, и в памяти он будет иметь конкретные значения для своих полей.

    4) Для каких целей используются пакеты в java?

        В Java пакеты (или packages) используются для организации и группировки классов и других компонентов программы в логические группы.
        Пакеты обеспечивают несколько важных целей, таких как:
            1. Управление именами:
            пакеты помогают избежать конфликтов имен.
            2. Инкапсуляция:
            пакеты помогают в организации доступа к классам и их членам
            3. Упорядочивание кода:
            Пакеты помогают упорядочить код, особенно в крупных проектах, группируя классы по функциональности или назначению.
            4. Упрощение поиска и использования классов:
            Пакеты упрощают поиск и использование классов.
            5. Поддержка модульности и совместной работы:
            Пакеты помогают организовать проект в модули и разделить его на компоненты, что облегчает совместную работу нескольких разработчиков и уменьшает зависимости между частями программы.
            6. Возможность подключения сторонних библиотек:
            Когда используются сторонние библиотеки, они также часто организованы в пакеты.

    5) Зачем необходимо ключевое слово new?

        Ключевое слово new в Java необходимо для:
            1. Создания объектов и выделения памяти для них.
            2. Вызова конструктора класса при создании объекта.
            3. Создания массивов и других динамических структур данных.



    6) Описать сигнатуру пользовательского конструктора и конструктора по умолчанию.

        1. Пользовательский конструктор — это конструктор, который явно определён в классе и может принимать параметры для инициализации объекта с заданными значениями.
            Он позволяет задать начальное состояние объекта при его создании.

            Имя конструктора: совпадает с именем класса.
            Параметры: могут быть любые (например, типы данных, которые используются для инициализации объекта).
            Возвращаемый тип: нет (конструкторы не возвращают значение).

        2. Конструктор по умолчанию — это конструктор, который автоматически создается компилятором, если в классе не определён явно ни один конструктор. Этот конструктор не принимает аргументов и просто инициализирует объект с дефолтными значениями (например, нулевыми значениями для примитивных типов и null для объектов).

            Имя конструктора: всегда совпадает с именем класса.
            Параметры: у конструктора по умолчанию нет параметров.
            Возвращаемый тип: нет.
        3. Различия между конструктором по умолчанию и пользовательским:
           Конструктор по умолчанию:

           Создается компилятором автоматически, если не определён явно.
           Инициализирует поля класса значениями по умолчанию (например, 0 для чисел, null для объектов).
           Не принимает параметров.
           Пользовательский конструктор:

           Определяется вручную разработчиком.
           Позволяет инициализировать поля объекта заданными значениями.
           Может принимать параметры.

    7) Зачем нужны операторы импорта?
        Операторы импорта в Java используются для подключения классов и пакетов из других библиотек или пакетов в программу.
        Это позволяет упростить код, исключив необходимость указывать полные имена классов и пакетов каждый раз при их использовании.
            Зачем нужны операторы импорта?
                1. Упрощение кода: Без оператора импорта вам нужно будет каждый раз указывать полное имя класса, включая его пакет.
                    Оператор импорта позволяет использовать краткие имена классов, если они уже были импортированы.
                2. Подключение стандартных и внешних библиотек:
                    В Java существует множество стандартных библиотек (например, java.util, java.io и т. д.)
                3. Работа с внешними библиотеками: Когда вы подключаете внешние библиотеки, например, с помощью Maven или Gradle, вам также нужно использовать операторы импорта для работы с их классами.
                    Это позволяет интегрировать сторонний функционал в ваше приложение.
                4. Избежание конфликтов имен:
                    Если в вашем проекте используется несколько классов с одинаковыми именами, но из разных пакетов, можно использовать алиасы с помощью оператора import static или просто избежать явного указания полного имени класса.
                5. Использование статических членов класса:
                    Если в классе есть статические методы или поля, можно использовать import static, чтобы обращаться к этим членам без указания имени класса.